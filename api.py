from fastapi import FastAPI, Query
import pickle
import pandas as pd
import numpy as np
import os
# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
with open("data/model.pkl", "rb") as f:
    model = pickle.load(f)

# –ó–∞–≥—Ä—É–∂–∞–µ–º label encoding –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –º–∞—à–∏–Ω –∏ –∫—É–∑–æ–≤–∞

BASE_DIR = os.path.dirname(os.path.abspath(__file__))

try:
    label_mapping_name = pd.read_csv(os.path.join(BASE_DIR, "data", "label_mapping_name.csv"))

    label_mapping_body = pd.read_csv(os.path.join(BASE_DIR, "data", "label_mapping_body.csv"))
except FileNotFoundError:
    raise FileNotFoundError(
        "‚ö†Ô∏è –§–∞–π–ª 'data/label_mapping_name.csv' –∏–ª–∏ 'data/label_mapping_body.csv' –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º.")

# –°–æ–∑–¥–∞–µ–º FastAPI
app = FastAPI(title="Car Price Predictor API",
              description="API –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º.\n"
                          "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω—ã –≤ —Ç–µ–Ω–≥–µ (KZT).\n"
                          "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, –æ–±—É—á–µ–Ω–Ω–∞—è –Ω–∞ –¥–∞–Ω–Ω—ã—Ö Kolesa.kz.",
              version="1.0")


# –§—É–Ω–∫—Ü–∏–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
def encode_car_name(car_name: str):
    match = label_mapping_name[label_mapping_name['Original_name'] == car_name]
    if not match.empty:
        return int(match.iloc[0]['Car_encoded'])
    return 0  # –ï—Å–ª–∏ –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ


def encode_body_type(body_type: str):
    match = label_mapping_body[label_mapping_body['Original_name'] == body_type]
    if not match.empty:
        return int(match.iloc[0]['Car_encoded'])
    return 0  # –ï—Å–ª–∏ –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ


@app.get("/predict/", summary="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è", tags=["–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"])
def predict(
        car_name: str = Query(..., title="–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å", example="BMW 530"),
        year: int = Query(..., title="–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞", example=2022),
        mileage: int = Query(..., title="–ü—Ä–æ–±–µ–≥ –≤ –∫–º", example=35000),
        engine_volume: float = Query(..., title="–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è, –ª", example=2.5),
        fuel_type: int = Query(..., title="–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞", example=0, description="0 - –±–µ–Ω–∑–∏–Ω, 1 - –¥–∏–∑–µ–ª—å"),
        gearbox: str = Query(..., title="–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á", example="–ê–≤—Ç–æ–º–∞—Ç"),
        drive: str = Query(..., title="–ü—Ä–∏–≤–æ–¥", example="–ü–µ—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–≤–æ–¥"),
        wheel: str = Query(..., title="–†—É–ª—å", example="–°–ª–µ–≤–∞"),
        customs_clear: str = Query(..., title="–†–∞—Å—Ç–∞–º–æ–∂–µ–Ω", example="–î–∞"),
        body_type: str = Query(..., title="–¢–∏–ø –∫—É–∑–æ–≤–∞", example="–°–µ–¥–∞–Ω")
):
    """
    üìå –í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –æ –º–∞—à–∏–Ω–µ:
    üîπ –ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å
    üîπ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞
    üîπ –ü—Ä–æ–±–µ–≥ –≤ –∫–º
    üîπ –û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è, –ª
    üîπ –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞ (0 - –±–µ–Ω–∑–∏–Ω, 1 - –¥–∏–∑–µ–ª—å)
    üîπ –ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á (–ú–µ—Ö–∞–Ω–∏–∫–∞, –ê–≤—Ç–æ–º–∞—Ç, –í–∞—Ä–∏–∞—Ç–æ—Ä, –†–æ–±–æ—Ç)
    üîπ –ü—Ä–∏–≤–æ–¥ (–ü–æ–ª–Ω—ã–π –ø—Ä–∏–≤–æ–¥, –ü–µ—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–≤–æ–¥, –ó–∞–¥–Ω–∏–π –ø—Ä–∏–≤–æ–¥)
    üîπ –†—É–ª—å (–°–ª–µ–≤–∞, –°–ø—Ä–∞–≤–∞)
    üîπ –†–∞—Å—Ç–∞–º–æ–∂–µ–Ω (–î–∞, –ù–µ—Ç)
    üîπ –¢–∏–ø –∫—É–∑–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–°–µ–¥–∞–Ω')
    """

    # –ö–æ–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    car_encoded = encode_car_name(car_name)
    body_encoded = encode_body_type(body_type)
    gearbox_mapping = {"–ú–µ—Ö–∞–Ω–∏–∫–∞": 0, "–ê–≤—Ç–æ–º–∞—Ç": 1, "–í–∞—Ä–∏–∞—Ç–æ—Ä": 2, "–†–æ–±–æ—Ç": 3}
    drive_mapping = {"–ü–æ–ª–Ω—ã–π –ø—Ä–∏–≤–æ–¥": 0, "–ü–µ—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–≤–æ–¥": 1, "–ó–∞–¥–Ω–∏–π –ø—Ä–∏–≤–æ–¥": 2}
    wheel_mapping = {"–°–ª–µ–≤–∞": 1, "–°–ø—Ä–∞–≤–∞": 0}
    customs_mapping = {"–ù–µ—Ç": 0, "–î–∞": 1}

    gearbox = gearbox_mapping.get(gearbox, 0)
    drive = drive_mapping.get(drive, 1)
    wheel = wheel_mapping.get(wheel, 0)
    customs_clear = customs_mapping.get(customs_clear, 1)

    # –°–æ–∑–¥–∞–µ–º DataFrame —Å –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    input_data = pd.DataFrame([{
        'isNewAuto': 0,
        'parameters_–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á': gearbox,
        'parameters_–ü—Ä–∏–≤–æ–¥': drive,
        'parameters_–†—É–ª—å': wheel,
        'parameters_–†–∞—Å—Ç–∞–º–æ–∂–µ–Ω –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ': customs_clear,
        'year': year,
        'mileage': mileage,
        'Car_encoded': car_encoded,
        'Body_encoded': body_encoded,
        'engine_volume': engine_volume,
        'fuel_type': fuel_type
    }])

    # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    predicted_price = model.predict(input_data)[0]

    return {"predicted_price": round(predicted_price, 2)}
