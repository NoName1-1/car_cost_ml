import uvicorn
from fastapi import FastAPI, Query
import requests
import json
import time
import random
import pickle
import pandas as pd
import numpy as np
from bs4 import BeautifulSoup
from sklearn.preprocessing import LabelEncoder
from sklearn.impute import SimpleImputer
import re

import os
import pickle

# –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∫—Ä–∏–ø—Ç
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# –ü–æ–ª–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
MODEL_PATH = os.path.join(BASE_DIR, "model.pkl")
ENCODER_PATH = os.path.join(BASE_DIR, "encoder.pkl")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Ñ–∞–π–ª—ã
if not os.path.exists(MODEL_PATH):
    raise FileNotFoundError(f"‚ùå –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {MODEL_PATH}")

if not os.path.exists(ENCODER_PATH):
    raise FileNotFoundError(f"‚ùå –§–∞–π–ª LabelEncoder –Ω–µ –Ω–∞–π–¥–µ–Ω: {ENCODER_PATH}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
with open(MODEL_PATH, "rb") as f:
    model = pickle.load(f)

# –ó–∞–≥—Ä—É–∂–∞–µ–º LabelEncoder
with open(ENCODER_PATH, "rb") as f:
    encoder = pickle.load(f)

print("‚úÖ –ú–æ–¥–µ–ª—å –∏ LabelEncoder —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")


# ==== 2. FASTAPI ====
app = FastAPI(title="Car Price Prediction API")

# ==== 3. –§–£–ù–ö–¶–ò–Ø –ü–ê–†–°–ò–ù–ì–ê ====
USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
]

def get_headers():
    return {"User-Agent": random.choice(USER_AGENTS)}

def fetch_car_data(url):
    """–ü–∞—Ä—Å–∏—Ç JSON —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    try:
        headers = get_headers()
        response = requests.get(url, headers=headers, timeout=30)
        if response.status_code == 429:
            print("‚ö†Ô∏è –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞! –ñ–¥—ë–º 90 —Å–µ–∫...")
            time.sleep(90)
            return fetch_car_data(url)
        if response.status_code == 200:
            html = response.text
            match = re.search(r"window\.digitalData\s*=\s*({.*?});", html, re.DOTALL)
            if match:
                return json.loads(match.group(1)).get("product", {})
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {url}: {e}")
    return None

# ==== 4. –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–• ====
def preprocess_data(car_data):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ –º–æ–¥–µ–ª—å"""
    print("üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ DataFrame:", car_data)

    df = pd.DataFrame([car_data]) if isinstance(car_data, dict) else pd.DataFrame(car_data)
    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
    df.columns = df.columns.str.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    pattern = r"\b(19|20)\d{2}\b"

    df.columns = df.columns.str.strip()

    # üîç –î–µ–±–∞–≥: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ (–µ—â—ë —Ä–∞–∑)
    print("üîé –ò—Ç–æ–≥–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:", df.columns.tolist())

    # üí° –ï—Å–ª–∏ 'name' –ø—Ä–æ–ø–∞–ª, —Å–æ–∑–¥–∞—ë–º –µ–≥–æ –≤—Ä—É—á–Ω—É—é!
    if "name" not in df.columns:
        df["name"] = car_data.get("name", "Unknown")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
    print("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤:", df.columns.tolist())

    if "name" in df:
        df["year"] = pd.to_numeric(df["name"].fillna("").str.extract(f"({pattern})")[0], errors="coerce").astype(
            "Int64")
    else:
        print("‚ùå –û—à–∏–±–∫–∞: 'name' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ df")

    print("üîé –ò—Ç–æ–≥–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã:", df.columns.tolist())  # –í—ã–≤–µ–¥–µ—Ç –≤—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è

    print("üìù DataFrame –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:\n", df.head())

    # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
    drop_cols = ["name", "id", "seller", "section", "categoryString", "region", "city"]
    df.drop(columns=[col for col in drop_cols if col in df.columns], axis=1, inplace=True)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
    pattern = r"\b(19|20)\d{2}\b"
    df["year"] = pd.to_numeric(df["name"].fillna("").str.extract(f"({pattern})")[0], errors="coerce").astype("Int64")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–±–µ–≥
    if "parameters_–ü—Ä–æ–±–µ–≥" in df.columns:
        df["mileage"] = pd.to_numeric(df["parameters_–ü—Ä–æ–±–µ–≥"].str.replace(r"\D+", "", regex=True), errors="coerce").astype("Int64")
        df.drop(columns=["parameters_–ü—Ä–æ–±–µ–≥"], inplace=True)

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–±–µ–≥–∞
    df["mileage"].fillna(df["mileage"].median(), inplace=True)

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ —Ñ–∏—á–∏
    categorical_features = ["parameters_–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á", "parameters_–ü—Ä–∏–≤–æ–¥", "parameters_–†—É–ª—å", "parameters_–†–∞—Å—Ç–∞–º–æ–∂–µ–Ω –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ", "fuel_type"]
    for col in categorical_features:
        if col in df.columns:
            df[col] = encoder.fit_transform(df[col].astype(str))

    # –ö–æ–¥–∏—Ä—É–µ–º –∫—É–∑–æ–≤ –∏ –±—Ä–µ–Ω–¥
    df["Car_encoded"] = encoder.fit_transform(df["name"])
    df["Body_encoded"] = encoder.fit_transform(df["parameters_–ö—É–∑–æ–≤"].fillna("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ —Å—Ä–µ–¥–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    imputer = SimpleImputer(strategy="mean")
    df.iloc[:, :] = imputer.fit_transform(df)

    # –ü—Ä–∏–≤–æ–¥–∏–º —Ñ–∏—á–∏ –∫ —Ç–æ–º—É –∂–µ –≤–∏–¥—É, —á—Ç–æ –±—ã–ª –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏
    df = df.reindex(columns=model.feature_names_in_, fill_value=0)

    return df

# ==== 5. API –≠–ù–î–ü–û–ò–ù–¢ ====
@app.get("/predict")
def predict_price(url: str = Query(..., description="–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ Kolesa.kz")):
    """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—É—é —Ü–µ–Ω—É"""
    car_data = fetch_car_data(url)

    print("üìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", json.dumps(car_data, indent=4, ensure_ascii=False))

    if not car_data:
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞"}

    df = preprocess_data(car_data)
    predicted_price = model.predict(df)[0]
    return {"predicted_price": round(predicted_price, 2)}

# ==== 6. –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ====
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
